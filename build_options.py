#Python glue program to generate C options to be read from inifile

import StringIO

DEFAULT_OPTIONS_FILENAME = "default_options.ini"
C_HANDLER_SOURCE = "handler.c"
C_OPTIONS_HEADER = "options.h"

#(Parameter_name,category,Parameter_type,Default_value)

scalar_options_set_1=[
("Omega_m","cosmo",float,0.26),
("Omega_l","cosmo",float,0.74),
("w","cosmo",float,-1.0),
("n_scalar","cosmo",float,0.960),
("sigma8","cosmo",float,0.798),
("z_source","cosmo",float,1.0)
]

scalar_options=[
("Cosmological parameters scalar",scalar_options_set_1)
]

#(Number_of_parameters_name,array_parameter_name,num_elements,Parameter_type,Default_values) (only numbers supported!!)
vector_options_set_1=[
("Nsi8","si8",3,float,0.798),
("Nw","w",4,float,-1.0)
]

vector_options=[
("Cosmological parameters vector",vector_options_set_1)
]

def ini_string(value,ptype):
	if ptype==str:
		return value
	elif ptype in(float,int):
		return str(value)
	else:
		raise ValueError("Unknown parameter type")

def declaration_string(ptype):
	if ptype==str:
		return 'char*'
	elif ptype==int:
		return 'int'
	elif ptype==float:
		return 'float'
	else:
		raise ValueError("Unknown parameter type")

def declaration_match(ptype):
	if ptype==str:
		return 'strdup(value)'
	elif ptype==int:
		return 'atoi(value)'
	elif ptype==float:
		return 'atof(value)'
	else:
		raise ValueError("Unknown parameter type")

def generate_handler(scalar_options,vector_options):
	S=StringIO.StringIO()
	S.write("""/* DO NOT EDIT THIS FILE - IT IS GENERATED FROM build_options.py. Edit that. */

#include <stdlib.h>
#include <string.h>
#include "options.h"

int handler(void *user,const char *section,const char *name, const char *value){
		
		sys_options *options = (sys_options*) user;
		
		#define MATCH(s,n) strcmp(section,s)==0 && strcmp(name,n)==0
""")
	
	S.write("""\n 
		if(0){
		}""")
	
	for set_name,options_set in scalar_options:
		for name,set,ptype,default in options_set:
			S.write(""" else if(MATCH("%s","%s")){
				options->%s = %s;
				}"""%(set,name,name,declaration_match(ptype)))

	S.write(""" else{
		return 0;
		}
		return 1;
}""")

	S.seek(0)
	return S.read()

def generate_options_type(scalar_options,vector_options):
	S=StringIO.StringIO()
	S.write("""/* DO NOT EDIT THIS FILE - IT IS GENERATED FROM build_options.py. Edit that. */

#ifndef __OPTIONS_H
#define __OPTIONS_H

typedef struct{
		
""")

	for set_name,options_set in scalar_options:
		for name,set,ptype,default in options_set:
			S.write("""%s %s;\n"""%(declaration_string(ptype),name))

	S.write("""
} sys_options;

int handler(void *,const char*,const char*,const char*);

#endif
		
""")

	S.seek(0)
	return S.read()

def generate_default_parameter_file(scalar_options,vector_options):
	S=StringIO.StringIO()
	S.write("""# Default options ini file generated from build_options.py #\n""")

	for set_name,options_set in scalar_options:
		S.write("""
##########################
##########%s##############
##########################
[%s]

"""%(set_name,options_set[0][1]))
		for name,set,ptype,default in options_set:
			S.write("""%s = %s\n""" %(name,ini_string(default,ptype)))

		S.write("""\n""")

	S.seek(0)
	return S.read()
	

file(C_HANDLER_SOURCE,"w").write(generate_handler(scalar_options,vector_options))
file(C_OPTIONS_HEADER,"w").write(generate_options_type(scalar_options,vector_options))
file(DEFAULT_OPTIONS_FILENAME,"w").write(generate_default_parameter_file(scalar_options,vector_options))
